%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 0 0 408 225
%%Creator: yExport 1.4.0.1
%%Producer: org.freehep.graphicsio.ps.PSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: Friday, May 16, 2014 9:08:30 PM CEST
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Courier 16#00 vg&newcompositefont
/DialogInput-Bold /Courier-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Courier-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
408 225 setpagesize
0 0 0 0 setmargins
0 0 setorigin
408 225 setsize
naturalsize
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0.00000 0.00000 m
408.000 0.00000 l
408.000 225.000 l
0.00000 225.000 l
0.00000 0.00000 l
h
f
0.00000 0.00000 0.00000 RG
0 0 408 225 rc
q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] concat
[ 1.00000 0.00000 0.00000 1.00000 -140.000 -99.0000 ] concat
1.00000 1.00000 1.00000 RG
newpath
140.000 99.0000 m
548.000 99.0000 l
548.000 324.000 l
140.000 324.000 l
140.000 99.0000 l
h
f
0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 -140.000 -99.0000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -140.000 -99.0000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -140.000 -99.0000 ] defaultmatrix matrix concatmatrix setmatrix
1.00000 1.00000 1.00000 RG
newpath
155.400 203.200 m
155.400 225.200 l
155.400 227.409 157.191 229.200 159.400 229.200  c
229.400 229.200 l
231.609 229.200 233.400 227.409 233.400 225.200  c
233.400 203.200 l
233.400 200.991 231.609 199.200 229.400 199.200  c
159.400 199.200 l
157.191 199.200 155.400 200.991 155.400 203.200  c
h
f
0.00000 0.00000 0.00000 RG
0 J
1.45000 M
newpath
176.806 211.585 m
176.699 210.788 176.640 210.290 176.591 209.859  c
176.126 209.709 175.570 209.568 174.980 209.568  c
173.362 209.568 172.382 210.573 172.382 211.784  c
172.382 213.121 173.569 213.727 174.432 214.158  c
175.379 214.657 176.043 215.072 176.043 215.951  c
176.043 216.823 175.512 217.379 174.607 217.379  c
173.337 217.379 172.731 216.109 172.523 215.337  c
172.150 215.445 l
172.224 216.034 172.407 217.138 172.490 217.379  c
172.615 217.437 172.789 217.537 173.104 217.637  c
173.420 217.744 173.835 217.836 174.349 217.836  c
176.043 217.836 177.155 216.798 177.155 215.495  c
177.155 214.158 176.059 213.586 175.005 213.071  c
173.993 212.581 173.420 212.166 173.420 211.311  c
173.420 210.647 173.860 209.992 174.789 209.992  c
175.835 209.992 176.217 210.871 176.433 211.652  c
h
181.364 217.188 m
181.256 216.856 l
181.073 216.948 180.799 217.064 180.509 217.064  c
180.202 217.064 179.778 216.898 179.778 215.918  c
179.778 212.855 l
181.073 212.855 l
181.239 212.747 181.281 212.482 181.156 212.349  c
179.778 212.349 l
179.778 210.656 l
179.612 210.622 l
178.707 211.469 l
178.707 212.349 l
178.151 212.349 l
177.811 212.714 l
177.869 212.855 l
178.707 212.855 l
178.707 216.342 l
178.707 217.321 179.164 217.786 179.986 217.786  c
180.094 217.786 180.285 217.744 180.509 217.620  c
h
186.186 216.300 m
185.738 216.715 185.265 216.906 184.759 216.906  c
183.904 216.906 182.982 216.242 182.957 214.673  c
184.385 214.623 185.929 214.499 186.153 214.466  c
186.377 214.416 186.444 214.308 186.444 214.075  c
186.444 213.113 185.605 212.208 184.551 212.208  c
184.543 212.208 l
183.887 212.208 183.215 212.556 182.683 213.137  c
182.185 213.677 181.895 214.408 181.895 215.213  c
181.895 216.566 182.791 217.786 184.310 217.786  c
184.709 217.786 185.597 217.570 186.394 216.566  c
h
184.261 212.664 m
184.908 212.664 185.306 213.254 185.306 213.893  c
185.306 214.051 185.232 214.117 185.016 214.125  c
184.327 214.150 183.671 214.150 183.015 214.150  c
183.190 213.137 183.721 212.664 184.252 212.664  c
h
196.703 217.645 m
196.703 217.321 l
195.990 217.230 195.907 217.197 195.907 216.391  c
195.907 214.100 l
195.907 212.880 195.276 212.208 194.296 212.208  c
193.948 212.208 193.632 212.349 193.367 212.515  c
193.068 212.714 192.719 212.938 192.354 213.204  c
192.097 212.581 191.565 212.208 190.976 212.208  c
190.586 212.208 190.287 212.341 189.955 212.540  c
189.581 212.764 189.316 212.988 189.050 213.162  c
189.050 212.166 l
188.469 212.407 187.780 212.565 187.249 212.648  c
187.249 212.955 l
187.954 213.063 187.996 213.137 187.996 213.909  c
187.996 216.375 l
187.996 217.172 187.880 217.246 187.083 217.321  c
187.083 217.645 l
189.739 217.645 l
189.739 217.321 l
189.175 217.246 189.067 217.172 189.067 216.391  c
189.067 213.561 l
189.440 213.270 189.897 212.963 190.362 212.963  c
191.067 212.963 191.408 213.428 191.408 214.341  c
191.408 216.391 l
191.408 217.188 191.300 217.246 190.561 217.321  c
190.561 217.645 l
193.275 217.645 l
193.275 217.321 l
192.603 217.246 192.487 217.172 192.487 216.408  c
192.487 214.075 l
192.487 213.860 192.470 213.719 192.453 213.569  c
192.918 213.196 193.367 212.963 193.765 212.963  c
194.479 212.963 194.827 213.453 194.827 214.366  c
194.827 216.325 l
194.827 217.188 194.686 217.246 193.997 217.321  c
193.997 217.645 l
h
206.930 217.645 m
206.930 217.321 l
206.216 217.230 206.133 217.197 206.133 216.391  c
206.133 214.100 l
206.133 212.880 205.502 212.208 204.523 212.208  c
204.174 212.208 203.859 212.349 203.593 212.515  c
203.294 212.714 202.946 212.938 202.580 213.204  c
202.323 212.581 201.792 212.208 201.202 212.208  c
200.812 212.208 200.514 212.341 200.181 212.540  c
199.808 212.764 199.542 212.988 199.277 213.162  c
199.277 212.166 l
198.696 212.407 198.007 212.565 197.475 212.648  c
197.475 212.955 l
198.181 213.063 198.223 213.137 198.223 213.909  c
198.223 216.375 l
198.223 217.172 198.106 217.246 197.309 217.321  c
197.309 217.645 l
199.966 217.645 l
199.966 217.321 l
199.401 217.246 199.293 217.172 199.293 216.391  c
199.293 213.561 l
199.667 213.270 200.123 212.963 200.588 212.963  c
201.294 212.963 201.634 213.428 201.634 214.341  c
201.634 216.391 l
201.634 217.188 201.526 217.246 200.787 217.321  c
200.787 217.645 l
203.502 217.645 l
203.502 217.321 l
202.829 217.246 202.713 217.172 202.713 216.408  c
202.713 214.075 l
202.713 213.860 202.697 213.719 202.680 213.569  c
203.145 213.196 203.593 212.963 203.992 212.963  c
204.705 212.963 205.054 213.453 205.054 214.366  c
205.054 216.325 l
205.054 217.188 204.913 217.246 204.224 217.321  c
204.224 217.645 l
h
211.935 216.300 m
211.487 216.715 211.014 216.906 210.508 216.906  c
209.653 216.906 208.731 216.242 208.706 214.673  c
210.134 214.623 211.678 214.499 211.902 214.466  c
212.126 214.416 212.193 214.308 212.193 214.075  c
212.193 213.113 211.354 212.208 210.300 212.208  c
210.292 212.208 l
209.636 212.208 208.964 212.556 208.432 213.137  c
207.934 213.677 207.644 214.408 207.644 215.213  c
207.644 216.566 208.540 217.786 210.059 217.786  c
210.458 217.786 211.346 217.570 212.143 216.566  c
h
210.010 212.664 m
210.657 212.664 211.056 213.254 211.056 213.893  c
211.056 214.051 210.981 214.117 210.765 214.125  c
210.076 214.150 209.420 214.150 208.764 214.150  c
208.939 213.137 209.470 212.664 210.001 212.664  c
h
214.816 213.519 m
214.816 212.166 l
214.185 212.424 213.604 212.565 212.990 212.664  c
212.990 212.938 l
213.679 213.038 213.745 213.088 213.745 213.860  c
213.745 216.375 l
213.745 217.172 213.637 217.246 212.890 217.321  c
212.890 217.645 l
215.837 217.645 l
215.837 217.321 l
214.874 217.246 214.816 217.172 214.816 216.375  c
214.816 214.208 l
215.081 213.561 215.455 213.204 215.770 213.204  c
215.978 213.204 216.119 213.279 216.310 213.453  c
216.385 213.519 216.493 213.544 216.642 213.486  c
216.908 213.362 217.074 213.113 217.074 212.830  c
217.074 212.532 216.775 212.208 216.327 212.208  c
215.754 212.208 215.247 212.855 214.841 213.519  c
h
f
2 J
10.0000 M
1.00000 1.00000 1.00000 RG
0 J
1.45000 M
0.00000 0.00000 0.00000 RG
newpath
155.400 203.200 m
155.400 225.200 l
155.400 227.409 157.191 229.200 159.400 229.200  c
229.400 229.200 l
231.609 229.200 233.400 227.409 233.400 225.200  c
233.400 203.200 l
233.400 200.991 231.609 199.200 229.400 199.200  c
159.400 199.200 l
157.191 199.200 155.400 200.991 155.400 203.200  c
h
S
2 J
10.0000 M
1.00000 1.00000 1.00000 RG
newpath
446.800 123.600 m
446.800 145.600 l
446.800 147.809 448.591 149.600 450.800 149.600  c
520.800 149.600 l
523.009 149.600 524.800 147.809 524.800 145.600  c
524.800 123.600 l
524.800 121.391 523.009 119.600 520.800 119.600  c
450.800 119.600 l
448.591 119.600 446.800 121.391 446.800 123.600  c
h
f
0.00000 0.00000 0.00000 RG
0 J
1.45000 M
newpath
470.331 133.762 m
471.054 133.587 472.058 133.114 472.058 131.960  c
472.058 131.396 471.792 130.865 471.361 130.574  c
470.946 130.292 470.406 130.151 469.460 130.151  c
466.173 130.151 l
466.173 130.516 l
467.152 130.582 467.210 130.657 467.210 131.695  c
467.210 136.517 l
467.210 137.538 467.127 137.621 466.065 137.696  c
466.065 138.045 l
468.920 138.045 l
469.908 138.045 470.755 137.904 471.394 137.563  c
472.124 137.165 472.573 136.534 472.573 135.721  c
472.573 134.500 471.602 133.969 470.331 133.803  c
h
468.364 133.645 m
468.364 131.296 l
468.364 130.923 468.397 130.782 468.505 130.707  c
468.613 130.624 468.895 130.558 469.194 130.558  c
470.323 130.558 470.813 131.246 470.813 132.118  c
470.813 133.122 470.248 133.645 468.904 133.645  c
h
468.364 134.069 m
468.879 134.069 l
470.390 134.069 471.236 134.625 471.236 135.845  c
471.236 137.099 470.356 137.597 469.385 137.613  c
468.605 137.621 468.364 137.389 468.364 136.484  c
h
474.756 131.579 m
475.138 131.579 475.420 131.271 475.420 130.923  c
475.420 130.533 475.138 130.242 474.772 130.242  c
474.407 130.242 474.092 130.533 474.092 130.923  c
474.092 131.271 474.407 131.579 474.756 131.579  c
h
476.250 138.045 m
476.250 137.721 l
475.461 137.630 475.378 137.563 475.378 136.725  c
475.378 132.583 l
474.822 132.799 474.200 132.940 473.536 133.048  c
473.536 133.338 l
474.266 133.463 474.308 133.521 474.308 134.285  c
474.308 136.725 l
474.308 137.572 474.216 137.646 473.444 137.721  c
473.444 138.045 l
h
478.134 131.579 m
478.524 131.579 478.798 131.271 478.798 130.923  c
478.798 130.533 478.524 130.242 478.143 130.242  c
477.786 130.242 477.478 130.533 477.478 130.923  c
477.478 131.271 477.786 131.579 478.134 131.579  c
h
476.864 133.338 m
477.603 133.446 477.686 133.496 477.686 134.334  c
477.686 136.609 l
477.686 137.704 477.661 138.460 477.603 138.999  c
477.545 139.439 477.445 139.713 477.312 139.896  c
477.155 140.103 476.839 140.245 476.408 140.319  c
476.233 140.352 476.150 140.460 476.150 140.618  c
476.150 140.925 476.416 141.174 476.582 141.174  c
476.698 141.174 476.789 141.124 476.922 141.033  c
477.229 140.792 478.026 139.846 478.475 138.634  c
478.699 138.012 478.765 137.489 478.765 136.675  c
478.765 132.583 l
478.184 132.799 477.528 132.956 476.864 133.048  c
h
484.559 136.318 m
484.393 136.609 l
483.912 137.364 483.629 137.613 482.700 137.613  c
481.529 137.613 l
482.534 136.003 483.513 134.475 484.518 132.932  c
484.426 132.749 l
481.529 132.749 l
481.073 132.749 480.898 132.674 480.824 132.483  c
480.575 132.483 l
480.467 133.006 480.284 133.762 480.126 134.276  c
480.442 134.409 l
480.624 134.052 l
480.981 133.363 481.181 133.181 482.069 133.181  c
482.326 133.181 482.700 133.181 483.115 133.181  c
482.094 134.808 481.106 136.318 480.043 137.854  c
480.135 138.045 l
484.293 138.045 l
484.493 137.588 484.692 136.991 484.874 136.476  c
h
486.651 131.579 m
487.033 131.579 487.315 131.271 487.315 130.923  c
487.315 130.533 487.033 130.242 486.667 130.242  c
486.302 130.242 485.987 130.533 485.987 130.923  c
485.987 131.271 486.302 131.579 486.651 131.579  c
h
488.145 138.045 m
488.145 137.721 l
487.356 137.630 487.273 137.563 487.273 136.725  c
487.273 132.583 l
486.717 132.799 486.095 132.940 485.431 133.048  c
485.431 133.338 l
486.161 133.463 486.203 133.521 486.203 134.285  c
486.203 136.725 l
486.203 137.572 486.111 137.646 485.339 137.721  c
485.339 138.045 l
h
492.096 137.588 m
491.988 137.256 l
491.806 137.348 491.532 137.464 491.241 137.464  c
490.934 137.464 490.511 137.298 490.511 136.318  c
490.511 133.255 l
491.806 133.255 l
491.972 133.147 492.013 132.882 491.889 132.749  c
490.511 132.749 l
490.511 131.056 l
490.345 131.022 l
489.440 131.869 l
489.440 132.749 l
488.884 132.749 l
488.543 133.114 l
488.602 133.255 l
489.440 133.255 l
489.440 136.742 l
489.440 137.721 489.896 138.186 490.718 138.186  c
490.826 138.186 491.017 138.144 491.241 138.020  c
h
495.939 137.588 m
495.831 137.256 l
495.649 137.348 495.375 137.464 495.084 137.464  c
494.777 137.464 494.354 137.298 494.354 136.318  c
494.354 133.255 l
495.649 133.255 l
495.815 133.147 495.856 132.882 495.732 132.749  c
494.354 132.749 l
494.354 131.056 l
494.188 131.022 l
493.283 131.869 l
493.283 132.749 l
492.727 132.749 l
492.387 133.114 l
492.445 133.255 l
493.283 133.255 l
493.283 136.742 l
493.283 137.721 493.740 138.186 494.561 138.186  c
494.669 138.186 494.860 138.144 495.084 138.020  c
h
500.762 136.700 m
500.314 137.115 499.841 137.306 499.334 137.306  c
498.479 137.306 497.558 136.642 497.533 135.073  c
498.961 135.023 500.505 134.899 500.729 134.866  c
500.953 134.816 501.019 134.708 501.019 134.475  c
501.019 133.513 500.181 132.608 499.127 132.608  c
499.119 132.608 l
498.463 132.608 497.790 132.956 497.259 133.538  c
496.761 134.077 496.471 134.808 496.471 135.613  c
496.471 136.966 497.367 138.186 498.886 138.186  c
499.285 138.186 500.173 137.970 500.970 136.966  c
h
498.836 133.064 m
499.484 133.064 499.882 133.654 499.882 134.293  c
499.882 134.451 499.808 134.517 499.592 134.525  c
498.903 134.550 498.247 134.550 497.591 134.550  c
497.766 133.538 498.297 133.064 498.828 133.064  c
h
503.643 133.919 m
503.643 132.566 l
503.012 132.824 502.431 132.965 501.816 133.064  c
501.816 133.338 l
502.505 133.438 502.572 133.488 502.572 134.260  c
502.572 136.775 l
502.572 137.572 502.464 137.646 501.717 137.721  c
501.717 138.045 l
504.664 138.045 l
504.664 137.721 l
503.701 137.646 503.643 137.572 503.643 136.775  c
503.643 134.608 l
503.908 133.961 504.282 133.604 504.597 133.604  c
504.805 133.604 504.946 133.679 505.137 133.853  c
505.211 133.919 505.319 133.944 505.469 133.886  c
505.734 133.762 505.900 133.513 505.900 133.230  c
505.900 132.932 505.602 132.608 505.153 132.608  c
504.581 132.608 504.074 133.255 503.667 133.919  c
h
f
2 J
10.0000 M
1.00000 1.00000 1.00000 RG
0 J
1.45000 M
0.00000 0.00000 0.00000 RG
newpath
446.800 123.600 m
446.800 145.600 l
446.800 147.809 448.591 149.600 450.800 149.600  c
520.800 149.600 l
523.009 149.600 524.800 147.809 524.800 145.600  c
524.800 123.600 l
524.800 121.391 523.009 119.600 520.800 119.600  c
450.800 119.600 l
448.591 119.600 446.800 121.391 446.800 123.600  c
h
S
2 J
10.0000 M
1.00000 1.00000 1.00000 RG
newpath
446.800 282.200 m
446.800 304.200 l
446.800 306.409 448.591 308.200 450.800 308.200  c
520.800 308.200 l
523.009 308.200 524.800 306.409 524.800 304.200  c
524.800 282.200 l
524.800 279.991 523.009 278.200 520.800 278.200  c
450.800 278.200 l
448.591 278.200 446.800 279.991 446.800 282.200  c
h
f
0.00000 0.00000 0.00000 RG
0 J
1.45000 M
newpath
467.049 288.568 m
464.351 288.568 462.699 290.577 462.699 292.777  c
462.699 295.117 464.558 296.836 466.891 296.836  c
469.248 296.836 471.216 295.217 471.216 292.594  c
471.216 290.162 469.240 288.568 467.057 288.568  c
h
466.791 289.025 m
468.426 289.025 469.838 290.369 469.838 292.918  c
469.838 295.267 468.559 296.379 467.165 296.379  c
465.380 296.379 464.060 294.694 464.060 292.461  c
464.060 290.162 465.388 289.025 466.783 289.025  c
h
477.723 291.349 m
475.515 291.349 l
475.515 291.673 l
476.204 291.764 476.271 291.905 476.088 292.453  c
475.822 293.233 475.416 294.346 475.017 295.267  c
474.677 294.470 474.171 293.183 473.863 292.378  c
473.664 291.855 473.697 291.772 474.362 291.673  c
474.362 291.349 l
471.714 291.349 l
471.714 291.673 l
472.369 291.781 472.486 291.880 472.768 292.544  c
473.357 293.947 473.930 295.317 474.511 296.778  c
474.860 296.778 l
475.557 294.976 476.213 293.474 476.636 292.586  c
476.960 291.880 477.068 291.764 477.723 291.673  c
h
482.256 295.300 m
481.807 295.715 481.334 295.906 480.828 295.906  c
479.973 295.906 479.051 295.242 479.027 293.673  c
480.454 293.623 481.998 293.499 482.222 293.466  c
482.446 293.416 482.513 293.308 482.513 293.076  c
482.513 292.113 481.674 291.208 480.620 291.208  c
480.612 291.208 l
479.956 291.208 479.284 291.556 478.753 292.138  c
478.255 292.677 477.964 293.408 477.964 294.213  c
477.964 295.566 478.861 296.786 480.380 296.786  c
480.778 296.786 481.666 296.570 482.463 295.566  c
h
480.330 291.664 m
480.977 291.664 481.376 292.254 481.376 292.893  c
481.376 293.051 481.301 293.117 481.085 293.125  c
480.396 293.150 479.740 293.150 479.085 293.150  c
479.259 292.138 479.790 291.664 480.321 291.664  c
h
485.136 292.519 m
485.136 291.166 l
484.505 291.424 483.924 291.565 483.310 291.664  c
483.310 291.938 l
483.999 292.038 484.065 292.088 484.065 292.860  c
484.065 295.375 l
484.065 296.172 483.957 296.246 483.210 296.321  c
483.210 296.645 l
486.157 296.645 l
486.157 296.321 l
485.194 296.246 485.136 296.172 485.136 295.375  c
485.136 293.208 l
485.402 292.561 485.775 292.204 486.091 292.204  c
486.298 292.204 486.439 292.279 486.630 292.453  c
486.705 292.519 486.813 292.544 486.962 292.486  c
487.228 292.362 487.394 292.113 487.394 291.830  c
487.394 291.532 487.095 291.208 486.647 291.208  c
486.074 291.208 485.568 291.855 485.161 292.519  c
h
493.893 296.645 m
493.893 296.321 l
493.188 296.246 493.096 296.188 493.096 295.375  c
493.096 293.308 l
493.096 291.822 492.383 291.208 491.370 291.208  c
490.714 291.208 490.067 291.639 489.602 292.088  c
489.602 288.012 l
489.095 288.170 488.299 288.352 487.717 288.435  c
487.717 288.726 l
488.506 288.801 488.539 288.842 488.539 289.606  c
488.539 295.375 l
488.539 296.172 488.431 296.246 487.693 296.321  c
487.693 296.645 l
490.382 296.645 l
490.382 296.321 l
489.676 296.246 489.602 296.147 489.602 295.375  c
489.602 292.519 l
489.942 292.146 490.399 291.930 490.847 291.930  c
491.611 291.930 492.026 292.403 492.026 293.408  c
492.026 295.375 l
492.026 296.163 491.926 296.246 491.229 296.321  c
491.229 296.645 l
h
498.890 295.300 m
498.442 295.715 497.969 295.906 497.463 295.906  c
496.608 295.906 495.686 295.242 495.661 293.673  c
497.089 293.623 498.633 293.499 498.857 293.466  c
499.081 293.416 499.148 293.308 499.148 293.076  c
499.148 292.113 498.309 291.208 497.255 291.208  c
497.247 291.208 l
496.591 291.208 495.919 291.556 495.387 292.138  c
494.889 292.677 494.599 293.408 494.599 294.213  c
494.599 295.566 495.495 296.786 497.014 296.786  c
497.413 296.786 498.301 296.570 499.098 295.566  c
h
496.965 291.664 m
497.612 291.664 498.010 292.254 498.010 292.893  c
498.010 293.051 497.936 293.117 497.720 293.125  c
497.031 293.150 496.375 293.150 495.719 293.150  c
495.894 292.138 496.425 291.664 496.956 291.664  c
h
501.148 290.179 m
501.530 290.179 501.812 289.871 501.812 289.523  c
501.812 289.133 501.530 288.842 501.165 288.842  c
500.799 288.842 500.484 289.133 500.484 289.523  c
500.484 289.871 500.799 290.179 501.148 290.179  c
h
502.642 296.645 m
502.642 296.321 l
501.854 296.230 501.771 296.163 501.771 295.325  c
501.771 291.183 l
501.215 291.399 500.592 291.540 499.928 291.648  c
499.928 291.938 l
500.658 292.063 500.700 292.121 500.700 292.885  c
500.700 295.325 l
500.700 296.172 500.609 296.246 499.837 296.321  c
499.837 296.645 l
h
509.324 296.014 m
508.976 295.981 l
508.478 295.931 508.386 295.873 508.386 295.209  c
508.386 288.012 l
507.897 288.170 507.050 288.352 506.361 288.435  c
506.361 288.751 l
507.233 288.809 507.316 288.842 507.316 289.631  c
507.316 291.341 l
507.017 291.241 506.693 291.208 506.519 291.208  c
504.800 291.208 503.290 292.519 503.290 294.204  c
503.290 295.906 504.610 296.786 505.639 296.786  c
505.772 296.786 506.095 296.720 506.585 296.437  c
507.316 296.006 l
507.316 296.786 l
508.096 296.537 509.059 296.379 509.324 296.329  c
h
507.316 295.607 m
507.017 295.806 506.602 295.989 506.195 295.989  c
505.431 295.989 504.510 295.325 504.510 293.872  c
504.510 292.113 505.539 291.673 506.062 291.673  c
506.535 291.673 507.017 291.880 507.316 292.304  c
h
f
2 J
10.0000 M
1.00000 1.00000 1.00000 RG
0 J
1.45000 M
0.00000 0.00000 0.00000 RG
newpath
446.800 282.200 m
446.800 304.200 l
446.800 306.409 448.591 308.200 450.800 308.200  c
520.800 308.200 l
523.009 308.200 524.800 306.409 524.800 304.200  c
524.800 282.200 l
524.800 279.991 523.009 278.200 520.800 278.200  c
450.800 278.200 l
448.591 278.200 446.800 279.991 446.800 282.200  c
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
210.824 199.178 m
226.029 186.692 l
242.357 174.819 l
259.028 164.200 l
276.041 154.836 l
293.397 146.725 l
311.096 139.869 l
329.137 134.267 l
347.521 129.919 l
366.247 126.825 l
385.316 124.986 l
404.728 124.400 l
424.482 125.069 l
435.838 126.155 l
435.936 126.171 l
S
newpath
446.874 127.344 m
435.582 120.098 l
434.302 132.030 l
h
f
newpath
274.425 131.182 m
273.214 130.161 272.500 128.218 272.500 126.135  c
272.500 124.060 273.189 122.134 274.425 121.105  c
274.176 120.814 l
272.375 122.026 271.570 123.935 271.570 126.127  c
271.570 126.135 l
271.570 128.335 272.375 130.269 274.176 131.456  c
h
279.779 129.414 m
279.779 129.065 l
278.675 128.990 278.592 128.866 278.592 127.986  c
278.592 121.736 l
277.845 122.001 277.082 122.234 276.268 122.366  c
276.268 122.657 l
276.916 122.682 l
277.430 122.715 277.480 122.773 277.480 123.404  c
277.480 127.986 l
277.480 128.866 277.405 128.990 276.310 129.065  c
276.310 129.414 l
h
286.387 128.916 m
286.262 128.592 l
286.130 128.667 285.964 128.725 285.822 128.725  c
285.598 128.725 285.382 128.542 285.382 128.003  c
285.382 125.819 l
285.382 125.172 285.250 124.666 284.793 124.284  c
284.511 124.068 284.154 123.977 283.764 123.977  c
283.075 124.110 282.236 124.574 281.880 124.832  c
281.639 124.998 281.481 125.147 281.481 125.330  c
281.481 125.620 281.805 125.869 282.046 125.869  c
282.236 125.869 282.369 125.786 282.444 125.570  c
282.552 125.180 282.660 124.906 282.818 124.749  c
282.942 124.616 283.125 124.533 283.340 124.533  c
283.930 124.533 284.328 124.998 284.328 125.869  c
284.328 126.085 l
284.063 126.309 283.208 126.625 282.419 126.874  c
281.747 127.090 281.415 127.455 281.415 128.061  c
281.415 128.824 282.021 129.555 282.942 129.555  c
283.291 129.555 283.872 129.115 284.370 128.799  c
284.428 128.990 284.503 129.156 284.669 129.314  c
284.801 129.447 285.067 129.555 285.299 129.555  c
h
284.328 128.401 m
284.112 128.617 283.714 128.799 283.423 128.799  c
283.058 128.799 282.577 128.517 282.577 127.878  c
282.577 127.430 282.842 127.189 283.324 126.982  c
283.581 126.865 284.079 126.633 284.328 126.508  c
h
289.857 126.135 m
289.857 123.935 289.060 122.034 287.234 120.814  c
286.993 121.096 l
288.188 122.084 288.927 124.060 288.927 126.135  c
288.927 128.218 288.238 130.136 286.993 131.182  c
287.234 131.456 l
289.068 130.236 289.857 128.335 289.857 126.152  c
h
291.907 127.778 m
291.591 127.778 291.284 127.986 291.284 128.301  c
291.284 128.517 291.376 128.625 291.434 128.625  c
291.899 128.733 292.239 129.024 292.239 129.464  c
292.239 129.920 291.882 130.252 291.259 130.501  c
291.392 130.875 l
292.197 130.651 293.094 130.111 293.094 129.132  c
293.094 128.277 292.380 127.778 291.923 127.778  c
h
300.664 131.182 m
299.452 130.161 298.738 128.218 298.738 126.135  c
298.738 124.060 299.427 122.134 300.664 121.105  c
300.415 120.814 l
298.614 122.026 297.809 123.935 297.809 126.127  c
297.809 126.135 l
297.809 128.335 298.614 130.269 300.415 131.456  c
h
306.018 129.414 m
306.018 129.065 l
304.914 128.990 304.831 128.866 304.831 127.986  c
304.831 121.736 l
304.084 122.001 303.320 122.234 302.507 122.366  c
302.507 122.657 l
303.154 122.682 l
303.669 122.715 303.719 122.773 303.719 123.404  c
303.719 127.986 l
303.719 128.866 303.644 128.990 302.548 129.065  c
302.548 129.414 l
h
309.164 124.508 m
309.164 120.781 l
308.674 120.947 307.861 121.130 307.280 121.204  c
307.280 121.495 l
308.052 121.569 308.093 121.652 308.093 122.416  c
308.093 129.123 l
308.807 129.439 309.446 129.555 309.978 129.555  c
311.654 129.555 313.124 128.293 313.124 126.525  c
313.124 125.097 311.995 123.977 310.642 123.977  c
310.501 123.977 310.318 124.018 310.086 124.118  c
h
309.164 124.882 m
309.397 124.774 309.745 124.674 310.077 124.674  c
311.057 124.674 311.928 125.446 311.928 126.849  c
311.928 128.268 311.281 129.073 310.301 129.073  c
309.687 129.073 309.322 128.650 309.239 128.401  c
309.189 128.293 309.164 128.169 309.164 127.986  c
h
316.984 126.135 m
316.984 123.935 316.187 122.034 314.360 120.814  c
314.120 121.096 l
315.315 122.084 316.054 124.060 316.054 126.135  c
316.054 128.218 315.365 130.136 314.120 131.182  c
314.360 131.456 l
316.195 130.236 316.984 128.335 316.984 126.152  c
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
233.406 214.960 m
233.752 214.966 l
272.268 212.671 l
309.948 207.314 l
346.791 198.895 l
382.798 187.414 l
417.968 172.871 l
452.302 155.266 l
454.686 153.796 l
S
newpath
461.495 149.595 m
448.656 151.641 l
453.835 154.321 l
453.907 160.151 l
h
f
newpath
360.200 209.996 m
358.988 208.975 358.274 207.032 358.274 204.949  c
358.274 202.874 358.963 200.948 360.200 199.918  c
359.951 199.628 l
358.150 200.840 357.344 202.749 357.344 204.940  c
357.344 204.949 l
357.344 207.148 358.150 209.083 359.951 210.270  c
h
365.902 206.435 m
365.512 207.223 365.371 207.256 364.682 207.256  c
362.433 207.256 l
364.134 205.546 l
365.321 204.343 365.778 203.654 365.778 202.616  c
365.778 201.338 364.790 200.549 363.661 200.549  c
362.956 200.549 362.375 200.865 361.976 201.272  c
361.237 202.301 l
361.528 202.566 l
361.860 202.077 362.383 201.421 363.230 201.421  c
364.126 201.421 364.657 202.010 364.657 203.006  c
364.657 204.036 363.894 205.015 363.130 205.895  c
362.532 206.592 361.819 207.273 361.138 207.937  c
361.138 208.228 l
365.819 208.228 l
365.961 207.680 366.093 207.107 366.268 206.551  c
h
370.144 204.949 m
370.144 202.749 369.347 200.848 367.521 199.628  c
367.280 199.910 l
368.476 200.898 369.215 202.874 369.215 204.949  c
369.215 207.032 368.526 208.950 367.280 209.996  c
367.521 210.270 l
369.356 209.049 370.144 207.148 370.144 204.965  c
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
446.803 134.155 m
446.535 134.152 l
408.081 136.674 l
370.438 142.168 l
333.608 150.633 l
297.588 162.068 l
262.381 176.474 l
228.597 193.542 l
228.512 193.594 l
S
newpath
219.076 199.249 m
232.454 198.227 l
226.285 187.933 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
492.833 149.585 m
495.105 154.425 l
501.751 174.250 l
505.739 194.075 l
507.069 213.900 l
505.739 233.725 l
501.751 253.550 l
496.908 267.998 l
496.865 268.088 l
S
newpath
492.796 278.308 m
502.810 269.378 l
491.661 264.940 l
h
f
newpath
519.400 218.796 m
518.188 217.775 517.474 215.832 517.474 213.749  c
517.474 211.674 518.163 209.748 519.400 208.718  c
519.151 208.428 l
517.350 209.640 516.544 211.549 516.544 213.740  c
516.544 213.749 l
516.544 215.948 517.350 217.883 519.151 219.070  c
h
523.542 212.446 m
523.891 212.213 524.181 211.989 524.389 211.806  c
524.629 211.566 524.754 211.300 524.754 210.960  c
524.754 210.038 524.023 209.349 522.886 209.349  c
522.878 209.349 l
522.197 209.349 521.633 209.665 521.284 210.055  c
520.728 210.835 l
520.994 211.093 l
521.309 210.619 521.799 210.121 522.479 210.121  c
523.119 210.121 523.642 210.495 523.642 211.250  c
523.642 212.122 522.820 212.578 521.716 212.927  c
521.790 213.292 l
521.981 213.234 522.289 213.168 522.562 213.168  c
523.251 213.168 524.115 213.608 524.115 214.720  c
524.115 215.907 523.517 216.530 522.687 216.530  c
521.973 216.530 521.425 216.131 521.126 215.865  c
521.018 215.782 520.911 215.782 520.811 215.865  c
520.686 215.948 520.520 216.131 520.504 216.289  c
520.487 216.447 520.529 216.596 520.711 216.745  c
520.894 216.920 521.417 217.169 521.998 217.169  c
522.803 217.169 525.260 216.330 525.260 214.322  c
525.268 213.425 524.646 212.661 523.542 212.470  c
h
529.344 213.749 m
529.344 211.549 528.547 209.648 526.721 208.428  c
526.480 208.710 l
527.676 209.698 528.414 211.674 528.414 213.749  c
528.414 215.832 527.726 217.750 526.480 218.796  c
526.721 219.070 l
528.556 217.849 529.344 215.948 529.344 213.765  c
h
f
2 J
10.0000 M
Q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
end end restore showpage

%%Trailer
%%EOF
